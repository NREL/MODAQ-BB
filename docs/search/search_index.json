{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MODAQ BlackBox Documentation Until this message is removed, this guide is in draft and actively being edited. During this time, some sections may be blank or not fully developed. General Overview The National Renewable Energy Laboratory (NREL), under funding from the Department of Energy's Water Power Technologies Office , has developed a compact, rapid deployment data acquisition system that can withstand water depths up to 400m. Codenamed \"BlackBox\" (or simply BB), since its initial purpose was to track marine assets and record vital data streams that could later be recovered in the event of a mishap - much like a traditional black box used in aviation and shipping, the name has stuck. MODAQ BlackBox is a battery-operable microcontroller platform with internal inertial sensing, GPS, satellite communications, and additional I/O (input/output) support in a depth-rated pressure enclosure. Since BB is self-contained and relatively compact, it can be quickly deployed with minimal effort. The enclosure can be clamped to a tube (such as part of a railing) or mast in a location with unobstructed view of the sky using the available clamp accessory or a common hose clamp. While BB is designed to operate unattended, users can configure what data are uploaded and the frequency of satellite transmissions. Once data are uploaded, they can be relayed to an email distribution list, MODAQ:Web operational dashboard, or custom destination. BB has found utility in NREL Waterpower projects beyond its original vision and has been configured and successfully deployed in more traditional data-gathering applications where a simple, battery-operated solution was indicated. As part of the MODAQ family, BB fills a space in the spectrum of missions can be supported that were previously impractical using the traditional MODAQ hardware architecture due to factors such as weight, size, and cost.","title":"Home"},{"location":"#modaq-blackbox-documentation","text":"Until this message is removed, this guide is in draft and actively being edited. During this time, some sections may be blank or not fully developed.","title":"MODAQ BlackBox Documentation "},{"location":"#general-overview","text":"The National Renewable Energy Laboratory (NREL), under funding from the Department of Energy's Water Power Technologies Office , has developed a compact, rapid deployment data acquisition system that can withstand water depths up to 400m. Codenamed \"BlackBox\" (or simply BB), since its initial purpose was to track marine assets and record vital data streams that could later be recovered in the event of a mishap - much like a traditional black box used in aviation and shipping, the name has stuck. MODAQ BlackBox is a battery-operable microcontroller platform with internal inertial sensing, GPS, satellite communications, and additional I/O (input/output) support in a depth-rated pressure enclosure. Since BB is self-contained and relatively compact, it can be quickly deployed with minimal effort. The enclosure can be clamped to a tube (such as part of a railing) or mast in a location with unobstructed view of the sky using the available clamp accessory or a common hose clamp. While BB is designed to operate unattended, users can configure what data are uploaded and the frequency of satellite transmissions. Once data are uploaded, they can be relayed to an email distribution list, MODAQ:Web operational dashboard, or custom destination. BB has found utility in NREL Waterpower projects beyond its original vision and has been configured and successfully deployed in more traditional data-gathering applications where a simple, battery-operated solution was indicated. As part of the MODAQ family, BB fills a space in the spectrum of missions can be supported that were previously impractical using the traditional MODAQ hardware architecture due to factors such as weight, size, and cost.","title":"General Overview"},{"location":"FAQ/","text":"FAQ Why build an asset tracker when there are commercially-available devices specifically for this purpose? When the notion of having a tracker was first presented, our first thought was that we would source something 'off the shelf'. We conducted a search and considered a variety of options targeted to both the private and commercial marine market such as purposeful asset trackers, voyage data recorders , and even repurposing lagrangian-drifter beacons. Aside from simple location tracking, the requirements expanded to include acquisition of external data streams, auxiliary data storage (backup/mirror of primary DAQ), and flexible communications options. There were also a number of other requirements such as positive buoyancy, can operate on batteries for a specific period of time, survive at depths of at least a few 100m, strobe light, and acoustic pinger. These requirements were prioritized into 'must-haves' and 'added-as-needed' (meaning we needed to have a solution if a specific project required it). The commercial options reviewed all had strengths and weaknesses to differing degrees on most of the requirements- which included things like: Proprietary or closed systems Ecosystem lock-in or subscription charges Limited external interfacing (usually limited to common marine or aviation electronics) Limited programming or configuration options Too bulky or difficult form-factor Lack (sufficient) onboard storage Limited documentation or unknown specifications of key features Some were rugged and submersible, others not so much It became clear that adapting the most promising candidates would be time consuming and the end result would likely be something that still falls short of requirements- a bit of a kludge. This would be difficult to assure to our sponsors that we're presenting the best solution for their ask and that it will work to expectations. This brought us to the conclusion to design our own system.","title":"FAQ"},{"location":"FAQ/#faq","text":"","title":"FAQ"},{"location":"FAQ/#why-build-an-asset-tracker-when-there-are-commercially-available-devices-specifically-for-this-purpose","text":"When the notion of having a tracker was first presented, our first thought was that we would source something 'off the shelf'. We conducted a search and considered a variety of options targeted to both the private and commercial marine market such as purposeful asset trackers, voyage data recorders , and even repurposing lagrangian-drifter beacons. Aside from simple location tracking, the requirements expanded to include acquisition of external data streams, auxiliary data storage (backup/mirror of primary DAQ), and flexible communications options. There were also a number of other requirements such as positive buoyancy, can operate on batteries for a specific period of time, survive at depths of at least a few 100m, strobe light, and acoustic pinger. These requirements were prioritized into 'must-haves' and 'added-as-needed' (meaning we needed to have a solution if a specific project required it). The commercial options reviewed all had strengths and weaknesses to differing degrees on most of the requirements- which included things like: Proprietary or closed systems Ecosystem lock-in or subscription charges Limited external interfacing (usually limited to common marine or aviation electronics) Limited programming or configuration options Too bulky or difficult form-factor Lack (sufficient) onboard storage Limited documentation or unknown specifications of key features Some were rugged and submersible, others not so much It became clear that adapting the most promising candidates would be time consuming and the end result would likely be something that still falls short of requirements- a bit of a kludge. This would be difficult to assure to our sponsors that we're presenting the best solution for their ask and that it will work to expectations. This brought us to the conclusion to design our own system.","title":"Why build an asset tracker when there are commercially-available devices specifically for this purpose?"},{"location":"about/","text":"","title":"About"},{"location":"dev_modules/","text":"ADC Strain Bridge ADC RS232/485","title":"Optional Modules"},{"location":"dev_modules/#adc","text":"","title":"ADC"},{"location":"dev_modules/#strain-bridge","text":"","title":"Strain Bridge"},{"location":"dev_modules/#adc_1","text":"","title":"ADC"},{"location":"dev_modules/#rs232485","text":"","title":"RS232/485"},{"location":"h_architecture/","text":"MODAQ BlackBox Hardware Architecture General Aside from the functional requirements laid out in the General Overview section, we had several design goals for the BlackBox platform, namely: Low cost hardware Widely available components Popular software development language Open-source libraries for peripherals Strong community support for all of the above There were also several practical goals to the design: Flexible power modes to minimize power consumption when needed Reasonably performant and reliable components Flexible I/O options Compact size Controller The development of MODAQ BlackBox began at a time when computer chip shortages were reaching its peak and many popular microcontroller (MCU) and microprocessor development platforms were in tight supply or had excessive markups. We looked at a number of MCU options that met our goals that managed to largely avoid the supply and pricing issues, such as Arduino, Teensy, and STM32, but ultimately selected the ESP32 platform. While we could have used any of the other platforms mentioned (and we did test them), the ESP32 has strong adoption in the Maker Community and there are commercial industrial controllers and PLCs based on the ESP32. What we like about the ESP32 is its very low cost, tiny form factor, fast 240 MHz dual-core processor, large system memory, FreeRTOS support, ample I/O options, and selectable power and sleep modes. In addition, the ESP32 System on a Chip (SoC) is available by itself for inclusion in custom circuit board designs or as a development board with breadboard/protoboard friendly pinouts, USB controller, and a voltage regulator. There are numerous vendors, including Adafruit and Sparkfun , that offer custom development board variants, but most follow a similar a similar design to the \" DevKit C \" layout, which is what we used. Modules At this stage in the BB development, we're using a development board for the MCU and breakout boards for the peripherals. This gives us broad flexibility for the functionality of any particular build. Tech Note: Breakout boards are modular circuit board constructions centered around a particular integrated circuit (IC) or SoC module that frequently include additional components as specified by the manufacturer's reference design commonly found in their datasheets. These additional components may include conditioning and/or filtering for signals and power, pull up/down resistors, indicator LEDs, and jumpers. These boards are convenient for breadboarding and rapid prototyping since they 'breakout' the tiny IC or SoC pins to common breadboard/perfboard header pins that are easier to work with. We are considering creating a PCB design in EDA software that would use raw components that would theoretically reduce power consumption, main board size, and build times, while improving reliability and ruggedness. However, since the majority of our builds to date have been one-offs, we use a compact perfboard to mount the components and soldered wires for the interconnects ( see Mainboard Layout in the Technical Reference section for details ). While the ESP32 can interface to a wide variety of hardware and communication/signaling protocols, this BB design uses the very common SPI, I2C, UART, and GPIO interfaces. RTC The ESP32 has an onboard Real Time Clock, however it's not very good and the time is not maintained between power cycles. To address this, we include an external DS3231 RTC with accuracy performance around \u00b13.5 PPM or better (temperature dependent). This keeps the clock drift to <<1 second/day- which is very good. The DS3231 interfaces to the ESP32 through I2C Tech Note: PPM is Parts Per Million and is similar to percent. Where percent is 'per' and 'cent' meaning 'per hundred' (100 cents to a dollar, cent ury is 100 years), PPM could be called permill (but never is!). The question is: parts per million of what? When it discussing clocks, it could refer to the drift expected of an oscillator (with its design frequency expressed in MHz for instance) or the drift expected with respect to actual time. Examples can be found here . IMU The Inertial Measurement Unit selected for BB is the InvenSense MPU-9250, which is a 9-DOF sensor measuring 3 axis each of acceleration, rotation, and magnetic field. Onboard processing allows it to output useful parameters including orientation and heading. InvenSense makes a family of roughly similar and compatible IMUs, including the very common MPU-6050. However, the MPU-9250 includes the magnetometer and supports Wake-On-Motion (WOM)- both of which are utilized in this BB design. If these features are not needed, the MPU-6050 is pin compatible with the BB design (though it has fewer pins, the first 8 pins are the same), but the code will need to be modified, since it's using a 9250 library and expecting the chip to respond with the 9250's identifier byte (and the WOM function calls disabled). The MPU-9250 interfaces to the ESP32 using I2C. IMUs can be very fussy devices to work with, since they have inherent drift and can employ complex mathematics and sensor fusion to reduce the impacts of this drift. There are also numerous specifications that are impacted by sensing methods and design price-point. Precision, high-specification models can cost tens of thousands of dollars, so expectations should be tempered for a <$20 device like the MPU-9250. That said, value-wise (defined as performance divided by cost) it's hard to beat- especially for this type of application. GPS In this BB reference design, we used a GPS breakout board based on the u-blox NEO-6M module. This is an older module that's compact, cheap, performs reasonable, and widely available though it's limited to just the US GPS constellation (no Galileo, Glonass, or BeiDou). Most ~~GPS~~ GNSS 1 modules with a UART (serial) communications interface will work with this BB code, since the code parses the text-based NMEA sentences which are standardized on most receivers. Therefore, it's not critical to use the identical module as discussed here. Tech Note: GNSS modules capable of receiving constellations other than US GPS may output NMEA sentences with the '$GN' prefix instead of '$GP'. Therefore the popular $GPGGA sentence will be $GNGGA. It may be necessary to adjust the BB code or include library to parse the $GN tags. Iridium Modem The BB could be built to communicate to the outside world through numerous methods including WiFi, ethernet, LoRa, VHF/UHF radio, cell modem, and serial, however a design requirement was that the BB must report data at least hourly in locations outside of WiFI or cellular range. In addition, since the objectives for the BB are to be self-contained and rapidly deployable, a tether/cable solution or nearby companion base station were out of consideration. This left as the only option satellite communications. For short, periodic data messages, our best and most accessible option was Iridium SBD . To use this service, we selected the low-cost RockBlock 9603N communications module. This has a sufficiently small footprint and an acceptable power use profile. In addition, it easily connects to the ESP32 and has a C++ library. The 9603N interfaces to the ESP32 using UART. Tech Note: Users who's purpose is \"related in some way or other to environmental protection, awareness or study, or to protect human life\" 2 might investigate if they qualify for using Argos instead of Iridium. While BB is not written with Argos in mind, it should not take much effort to modify the C++ code to use Argos. Another option is Kin\u00e9is which appears to be related to Argos, but allows for less restrictive use cases. Storage One of the weak points of most MCU-based SBCs, relatively speaking, is that they have few options for local storage. The most common and best supported method is using microSD cards- which is what BB uses. Fortunately, microSD cards are pretty reliable and widely used in a broad range of electronics, however, not all microSD cards are created equal . We use microSD cards with minimum Speed Class 10 and Application Class A1 or industrial markings from prominent manufacturers. While it's always recommended to perform a data budget analysis 3 to determine storage size requirements and select a card with sufficient storage. It's best not to go crazy and just get a huge card, since high capacity cards might not be supported due to hardware and/or file system limitations. Cards up to 8GB capacities are sufficient due to the low volume of data generated by the BB tracking variant and will hardly fill a small fraction of that space. Tech Note: MicroSD cards designed for industrial applications claim to be more rugged for for harsh environments and have greater rated write endurance that standard, everyday cards. Power BB requires both 5v and 3.3v DC supplies to power the controller and breakout boards, while the whole system is powered from 3 primary Lithium Thionyl Chloride batteries wired in series producing 10.8 v nominally. We use step-down voltage regulators to reduce the battery voltage to the desired values. While there is efficiency penalty to pay with about 10% lost to the conversion, we gain stability from the onboard regulator circuit. Enclosure We had a few requirements to meet that largely limited our enclosure selection for the electronics, such as: it had to be rugged, survive submersion to several hundred meters, and float. Further, it had to be compact as possible, meet runtime expectations, contain GPS and Iridium antennas, and be adaptable for connections to external I/O. Of all of these, the depth rating requirement was the dominant factor and that influenced how we met the other requirements. BB uses a 3\" diameter, 9.5\" long cylindrical pressure housing, which was the smallest size we could optimize for that allowed reserve buoyancy (floats) and has a sufficiently sized aperture to mount the antennas 4 behind a radio-transparent endcap. We were fortunate to find a supplier of good quality and low cost pressure housings with a large assortment of sizes and options- and with excellent documentation, complete with CAD files. The specifics of the pressure housing can be found in the Technical Reference section . Pedantically, GPS refers to the US GPS constellation, while GNSS broadly covers all constellations \u21a9 https://www.clsamerica.com/science-with-argos \u21a9 In a data budget analysis, multiply together: number bytes written per write operation, number of write operations per day (or hour/minute depending on deployment time scale), number of deployment days, and safety factor (1.10 at minimum). The product will be the minimum size of the storage needed. \u21a9 \"sufficiently sized aperture\" is a bit of a stretch. As discussed in the Technical Reference section , we made significant compromises for the antennas, particularly the GPS antenna, to make things fit. \u21a9","title":"Hardware Overview"},{"location":"h_architecture/#modaq-blackbox-hardware-architecture","text":"","title":"MODAQ BlackBox Hardware Architecture"},{"location":"h_architecture/#general","text":"Aside from the functional requirements laid out in the General Overview section, we had several design goals for the BlackBox platform, namely: Low cost hardware Widely available components Popular software development language Open-source libraries for peripherals Strong community support for all of the above There were also several practical goals to the design: Flexible power modes to minimize power consumption when needed Reasonably performant and reliable components Flexible I/O options Compact size","title":"General"},{"location":"h_architecture/#controller","text":"The development of MODAQ BlackBox began at a time when computer chip shortages were reaching its peak and many popular microcontroller (MCU) and microprocessor development platforms were in tight supply or had excessive markups. We looked at a number of MCU options that met our goals that managed to largely avoid the supply and pricing issues, such as Arduino, Teensy, and STM32, but ultimately selected the ESP32 platform. While we could have used any of the other platforms mentioned (and we did test them), the ESP32 has strong adoption in the Maker Community and there are commercial industrial controllers and PLCs based on the ESP32. What we like about the ESP32 is its very low cost, tiny form factor, fast 240 MHz dual-core processor, large system memory, FreeRTOS support, ample I/O options, and selectable power and sleep modes. In addition, the ESP32 System on a Chip (SoC) is available by itself for inclusion in custom circuit board designs or as a development board with breadboard/protoboard friendly pinouts, USB controller, and a voltage regulator. There are numerous vendors, including Adafruit and Sparkfun , that offer custom development board variants, but most follow a similar a similar design to the \" DevKit C \" layout, which is what we used.","title":"Controller"},{"location":"h_architecture/#modules","text":"At this stage in the BB development, we're using a development board for the MCU and breakout boards for the peripherals. This gives us broad flexibility for the functionality of any particular build. Tech Note: Breakout boards are modular circuit board constructions centered around a particular integrated circuit (IC) or SoC module that frequently include additional components as specified by the manufacturer's reference design commonly found in their datasheets. These additional components may include conditioning and/or filtering for signals and power, pull up/down resistors, indicator LEDs, and jumpers. These boards are convenient for breadboarding and rapid prototyping since they 'breakout' the tiny IC or SoC pins to common breadboard/perfboard header pins that are easier to work with. We are considering creating a PCB design in EDA software that would use raw components that would theoretically reduce power consumption, main board size, and build times, while improving reliability and ruggedness. However, since the majority of our builds to date have been one-offs, we use a compact perfboard to mount the components and soldered wires for the interconnects ( see Mainboard Layout in the Technical Reference section for details ). While the ESP32 can interface to a wide variety of hardware and communication/signaling protocols, this BB design uses the very common SPI, I2C, UART, and GPIO interfaces.","title":"Modules"},{"location":"h_architecture/#rtc","text":"The ESP32 has an onboard Real Time Clock, however it's not very good and the time is not maintained between power cycles. To address this, we include an external DS3231 RTC with accuracy performance around \u00b13.5 PPM or better (temperature dependent). This keeps the clock drift to <<1 second/day- which is very good. The DS3231 interfaces to the ESP32 through I2C Tech Note: PPM is Parts Per Million and is similar to percent. Where percent is 'per' and 'cent' meaning 'per hundred' (100 cents to a dollar, cent ury is 100 years), PPM could be called permill (but never is!). The question is: parts per million of what? When it discussing clocks, it could refer to the drift expected of an oscillator (with its design frequency expressed in MHz for instance) or the drift expected with respect to actual time. Examples can be found here .","title":"RTC"},{"location":"h_architecture/#imu","text":"The Inertial Measurement Unit selected for BB is the InvenSense MPU-9250, which is a 9-DOF sensor measuring 3 axis each of acceleration, rotation, and magnetic field. Onboard processing allows it to output useful parameters including orientation and heading. InvenSense makes a family of roughly similar and compatible IMUs, including the very common MPU-6050. However, the MPU-9250 includes the magnetometer and supports Wake-On-Motion (WOM)- both of which are utilized in this BB design. If these features are not needed, the MPU-6050 is pin compatible with the BB design (though it has fewer pins, the first 8 pins are the same), but the code will need to be modified, since it's using a 9250 library and expecting the chip to respond with the 9250's identifier byte (and the WOM function calls disabled). The MPU-9250 interfaces to the ESP32 using I2C. IMUs can be very fussy devices to work with, since they have inherent drift and can employ complex mathematics and sensor fusion to reduce the impacts of this drift. There are also numerous specifications that are impacted by sensing methods and design price-point. Precision, high-specification models can cost tens of thousands of dollars, so expectations should be tempered for a <$20 device like the MPU-9250. That said, value-wise (defined as performance divided by cost) it's hard to beat- especially for this type of application.","title":"IMU"},{"location":"h_architecture/#gps","text":"In this BB reference design, we used a GPS breakout board based on the u-blox NEO-6M module. This is an older module that's compact, cheap, performs reasonable, and widely available though it's limited to just the US GPS constellation (no Galileo, Glonass, or BeiDou). Most ~~GPS~~ GNSS 1 modules with a UART (serial) communications interface will work with this BB code, since the code parses the text-based NMEA sentences which are standardized on most receivers. Therefore, it's not critical to use the identical module as discussed here. Tech Note: GNSS modules capable of receiving constellations other than US GPS may output NMEA sentences with the '$GN' prefix instead of '$GP'. Therefore the popular $GPGGA sentence will be $GNGGA. It may be necessary to adjust the BB code or include library to parse the $GN tags.","title":"GPS"},{"location":"h_architecture/#iridium-modem","text":"The BB could be built to communicate to the outside world through numerous methods including WiFi, ethernet, LoRa, VHF/UHF radio, cell modem, and serial, however a design requirement was that the BB must report data at least hourly in locations outside of WiFI or cellular range. In addition, since the objectives for the BB are to be self-contained and rapidly deployable, a tether/cable solution or nearby companion base station were out of consideration. This left as the only option satellite communications. For short, periodic data messages, our best and most accessible option was Iridium SBD . To use this service, we selected the low-cost RockBlock 9603N communications module. This has a sufficiently small footprint and an acceptable power use profile. In addition, it easily connects to the ESP32 and has a C++ library. The 9603N interfaces to the ESP32 using UART. Tech Note: Users who's purpose is \"related in some way or other to environmental protection, awareness or study, or to protect human life\" 2 might investigate if they qualify for using Argos instead of Iridium. While BB is not written with Argos in mind, it should not take much effort to modify the C++ code to use Argos. Another option is Kin\u00e9is which appears to be related to Argos, but allows for less restrictive use cases.","title":"Iridium Modem"},{"location":"h_architecture/#storage","text":"One of the weak points of most MCU-based SBCs, relatively speaking, is that they have few options for local storage. The most common and best supported method is using microSD cards- which is what BB uses. Fortunately, microSD cards are pretty reliable and widely used in a broad range of electronics, however, not all microSD cards are created equal . We use microSD cards with minimum Speed Class 10 and Application Class A1 or industrial markings from prominent manufacturers. While it's always recommended to perform a data budget analysis 3 to determine storage size requirements and select a card with sufficient storage. It's best not to go crazy and just get a huge card, since high capacity cards might not be supported due to hardware and/or file system limitations. Cards up to 8GB capacities are sufficient due to the low volume of data generated by the BB tracking variant and will hardly fill a small fraction of that space. Tech Note: MicroSD cards designed for industrial applications claim to be more rugged for for harsh environments and have greater rated write endurance that standard, everyday cards.","title":"Storage"},{"location":"h_architecture/#power","text":"BB requires both 5v and 3.3v DC supplies to power the controller and breakout boards, while the whole system is powered from 3 primary Lithium Thionyl Chloride batteries wired in series producing 10.8 v nominally. We use step-down voltage regulators to reduce the battery voltage to the desired values. While there is efficiency penalty to pay with about 10% lost to the conversion, we gain stability from the onboard regulator circuit.","title":"Power"},{"location":"h_architecture/#enclosure","text":"We had a few requirements to meet that largely limited our enclosure selection for the electronics, such as: it had to be rugged, survive submersion to several hundred meters, and float. Further, it had to be compact as possible, meet runtime expectations, contain GPS and Iridium antennas, and be adaptable for connections to external I/O. Of all of these, the depth rating requirement was the dominant factor and that influenced how we met the other requirements. BB uses a 3\" diameter, 9.5\" long cylindrical pressure housing, which was the smallest size we could optimize for that allowed reserve buoyancy (floats) and has a sufficiently sized aperture to mount the antennas 4 behind a radio-transparent endcap. We were fortunate to find a supplier of good quality and low cost pressure housings with a large assortment of sizes and options- and with excellent documentation, complete with CAD files. The specifics of the pressure housing can be found in the Technical Reference section . Pedantically, GPS refers to the US GPS constellation, while GNSS broadly covers all constellations \u21a9 https://www.clsamerica.com/science-with-argos \u21a9 In a data budget analysis, multiply together: number bytes written per write operation, number of write operations per day (or hour/minute depending on deployment time scale), number of deployment days, and safety factor (1.10 at minimum). The product will be the minimum size of the storage needed. \u21a9 \"sufficiently sized aperture\" is a bit of a stretch. As discussed in the Technical Reference section , we made significant compromises for the antennas, particularly the GPS antenna, to make things fit. \u21a9","title":"Enclosure"},{"location":"links/","text":"","title":"Useful Links"},{"location":"ref_design/","text":"","title":"Ref design"},{"location":"s_architecture/","text":"","title":"Software Overview"},{"location":"tech_ref/","text":"Technical Reference Manual System Design Once all the components were selected, it was necessary to figure out how to mount and wire them- while being constrained by the available space in the enclosure. It was an iterative process with several variables to optimize, including the enclosure's diameter and length, battery size and quantity, and electronics placement. Since one of our requirements was that the package floats, volume, weight, and center of gravity were also selection factors. Ultimately, it was determined that a 75mm inner diameter by 240mm length cylindrical pressure housing would be the minimal size for this design. Schematic Mainboard Layout With the 75mm diameter constraint of the pressure housing, we limited the board width to a maximum of 60mm to allow for component clearance with the wall curvature. With a bit of finesse, we were able to arrange all components except the satellite modem on a single side of a 58 x 94mm perfboard . The other side of the board was reserved primarily for wiring. Part placement was dense, but manageable. All components stayed within the footprint of the perfboard. The wiring was pre-mapped using the row and column markings on the board in a spreadsheet and this was used as a checklist during soldering so that no connections were missed. Even with careful planning, the wiring turned into a bit of a rat's nest, with congested zones that became difficult to solder. Our technique improved for the second unit we assembled (not pictured), but we are strongly considering designing a mainboard in KiCad (or other EDA software) if we intend to produce more of these. Power System This implementation of MODAQ BlackBox is powered by 3 Tadiran Lithium Thionyl Chloride D-sized primary batteries wired in parallel to deliver, nominally, 3.6v with 57 Ahr or around 200 Whr of capacity. The mainboard components operate on 3.3v while the satellite modem requires 5v. We used a buck converter to regulate the 3.3v supply and a boost converter for the 5v side. Power Management Power management was a top priority and it informed several decisions including component selection and sleep strategies. Unlike DAQ variants of this design, the BlackBox configuration does not require continuous sampling. Therefore we could introduce sleep cycles to conserve power. MCU The ESP32 MCU can be programmatically throttled to lower clock speeds to reduce power consumption. For instance this line will reduce the clock speed to 80 Mhz: { setCpuFrequencyMhz(80); } This will result in approximately 50% power savings over the full (default) 240 MHz clock speed. This link contains a good discussion and how-to on ESP power saving measures. GPS Module The GPS' maximum power consumption is on par with the MCU operating at full clock speed- and this power varies depending on the current operational mode the GPS. Simply, the GPS will startup in Acquisition mode until it acquires sufficient satellites and then it may toggle between Acquisition mode and Tracking mode as needed. Tracking mode consumes less power than Acquisition mode, however to be conservative, we based our power consumption projections on the device's maximum published drain. Some GPS modules may have power saving modes that can be preset or invoked, however do to the variability of these modes and likely performance reduction, we left the GPS to its default settings and elected to control the power going to the GPS module instead. Using a GPIO pin on the ESP32 MCU, we set the pin to digital HIGH when we want to power the GPS and LOW to turn it off. Since a GPIO pin cannot supply sufficient current to operate the GPS, we use a 2N222 transistor connected to that GPIO pin to switch the supply to the GPS. There are concerns that simply pulling the plug on the GPS is not an ideal way to manage the power consumption of the system. Continuing the discussion above on Acquisition vs Tracking mode, we usually think of GPS operation in terms of Cold Start, Warm Start, and Hot Start. Manufacturers will often publish expected times to first fix based on which of these start modes is currently applicable. The distinction between these modes is a function of completeness and freshness of the device's ephemeris data (record of tracked satellites' orbital position and information necessary to calculate a positional fix), which in itself is a function of how long the device spent in Acquisition mode and how long ago Acquisition mode ran. Cutting power to the GPS obviously drops the power consumption to zero, but also suspends the building of the ephemeris data. Most GPS units have a backup battery which will preserve the ephemeris between power cycles, but if enough time has elapsed - or the ephemeris was incomplete on the last power up interval - the GPS may have to spend more time at full power consumption to achieve its first fix. We've found that after a 30-60 minute sleep cycle, our time to first fix (TTFF), under best conditions, is <60 seconds. However, if there is heavy cloud cover or antenna obstruction, this time could easily exceed several minutes. In the BlackBox code, we have several measures to address long TTFF as well as low satellite count and fix age: Reject fixes that are more than 1000 ms old. If TTFF is greater than a configurable value, we cancel GPS sleep for the next sleep cycle. If satellite count is less than a configurable value during any one of the first 5 wake cycles, we cancel GPS sleep on next sleep cycle. These measures aim to prevent data starvation of the GPS and improve fix reliability. It may be worthwhile to explore alternative strategies rather than simply killing power to the GPS, however this approach has worked for us. Pressure housing The MODAQ BB design presented here uses the BlueRobotics aluminum subsea housing with an inner diameter of 75mm (3\") and 240mm (9.5\") in length. For radio transparency, we selected the acrylic blank endcap for one end of the housing. Acrylic parts affect the maximum depth rating of the system, however it was necessary for the GPS and satellite radios to function. Maximum possible depth rating for BlueRobotics housings is 950m. The following selections will impact the depth rating: Flat acrylic endcap derate depth to 400m Dome acrylic endcap derate depth to 750m Aluminum endcap full depth rating 950m Swap aluminum tube for transparent acrylic, derates from 125m to 300m depending on length of tube For completely submerged applications, it's not necessary to use any acrylic parts unless transparency is necessary.","title":"Technical Reference"},{"location":"tech_ref/#technical-reference-manual","text":"","title":"Technical Reference Manual"},{"location":"tech_ref/#system-design","text":"Once all the components were selected, it was necessary to figure out how to mount and wire them- while being constrained by the available space in the enclosure. It was an iterative process with several variables to optimize, including the enclosure's diameter and length, battery size and quantity, and electronics placement. Since one of our requirements was that the package floats, volume, weight, and center of gravity were also selection factors. Ultimately, it was determined that a 75mm inner diameter by 240mm length cylindrical pressure housing would be the minimal size for this design.","title":"System Design"},{"location":"tech_ref/#schematic","text":"","title":"Schematic"},{"location":"tech_ref/#mainboard-layout","text":"With the 75mm diameter constraint of the pressure housing, we limited the board width to a maximum of 60mm to allow for component clearance with the wall curvature. With a bit of finesse, we were able to arrange all components except the satellite modem on a single side of a 58 x 94mm perfboard . The other side of the board was reserved primarily for wiring. Part placement was dense, but manageable. All components stayed within the footprint of the perfboard. The wiring was pre-mapped using the row and column markings on the board in a spreadsheet and this was used as a checklist during soldering so that no connections were missed. Even with careful planning, the wiring turned into a bit of a rat's nest, with congested zones that became difficult to solder. Our technique improved for the second unit we assembled (not pictured), but we are strongly considering designing a mainboard in KiCad (or other EDA software) if we intend to produce more of these.","title":"Mainboard Layout"},{"location":"tech_ref/#power-system","text":"This implementation of MODAQ BlackBox is powered by 3 Tadiran Lithium Thionyl Chloride D-sized primary batteries wired in parallel to deliver, nominally, 3.6v with 57 Ahr or around 200 Whr of capacity. The mainboard components operate on 3.3v while the satellite modem requires 5v. We used a buck converter to regulate the 3.3v supply and a boost converter for the 5v side.","title":"Power System"},{"location":"tech_ref/#power-management","text":"Power management was a top priority and it informed several decisions including component selection and sleep strategies. Unlike DAQ variants of this design, the BlackBox configuration does not require continuous sampling. Therefore we could introduce sleep cycles to conserve power.","title":"Power Management"},{"location":"tech_ref/#mcu","text":"The ESP32 MCU can be programmatically throttled to lower clock speeds to reduce power consumption. For instance this line will reduce the clock speed to 80 Mhz: { setCpuFrequencyMhz(80); } This will result in approximately 50% power savings over the full (default) 240 MHz clock speed. This link contains a good discussion and how-to on ESP power saving measures.","title":"MCU"},{"location":"tech_ref/#gps-module","text":"The GPS' maximum power consumption is on par with the MCU operating at full clock speed- and this power varies depending on the current operational mode the GPS. Simply, the GPS will startup in Acquisition mode until it acquires sufficient satellites and then it may toggle between Acquisition mode and Tracking mode as needed. Tracking mode consumes less power than Acquisition mode, however to be conservative, we based our power consumption projections on the device's maximum published drain. Some GPS modules may have power saving modes that can be preset or invoked, however do to the variability of these modes and likely performance reduction, we left the GPS to its default settings and elected to control the power going to the GPS module instead. Using a GPIO pin on the ESP32 MCU, we set the pin to digital HIGH when we want to power the GPS and LOW to turn it off. Since a GPIO pin cannot supply sufficient current to operate the GPS, we use a 2N222 transistor connected to that GPIO pin to switch the supply to the GPS. There are concerns that simply pulling the plug on the GPS is not an ideal way to manage the power consumption of the system. Continuing the discussion above on Acquisition vs Tracking mode, we usually think of GPS operation in terms of Cold Start, Warm Start, and Hot Start. Manufacturers will often publish expected times to first fix based on which of these start modes is currently applicable. The distinction between these modes is a function of completeness and freshness of the device's ephemeris data (record of tracked satellites' orbital position and information necessary to calculate a positional fix), which in itself is a function of how long the device spent in Acquisition mode and how long ago Acquisition mode ran. Cutting power to the GPS obviously drops the power consumption to zero, but also suspends the building of the ephemeris data. Most GPS units have a backup battery which will preserve the ephemeris between power cycles, but if enough time has elapsed - or the ephemeris was incomplete on the last power up interval - the GPS may have to spend more time at full power consumption to achieve its first fix. We've found that after a 30-60 minute sleep cycle, our time to first fix (TTFF), under best conditions, is <60 seconds. However, if there is heavy cloud cover or antenna obstruction, this time could easily exceed several minutes. In the BlackBox code, we have several measures to address long TTFF as well as low satellite count and fix age: Reject fixes that are more than 1000 ms old. If TTFF is greater than a configurable value, we cancel GPS sleep for the next sleep cycle. If satellite count is less than a configurable value during any one of the first 5 wake cycles, we cancel GPS sleep on next sleep cycle. These measures aim to prevent data starvation of the GPS and improve fix reliability. It may be worthwhile to explore alternative strategies rather than simply killing power to the GPS, however this approach has worked for us.","title":"GPS Module"},{"location":"tech_ref/#pressure-housing","text":"The MODAQ BB design presented here uses the BlueRobotics aluminum subsea housing with an inner diameter of 75mm (3\") and 240mm (9.5\") in length. For radio transparency, we selected the acrylic blank endcap for one end of the housing. Acrylic parts affect the maximum depth rating of the system, however it was necessary for the GPS and satellite radios to function. Maximum possible depth rating for BlueRobotics housings is 950m. The following selections will impact the depth rating: Flat acrylic endcap derate depth to 400m Dome acrylic endcap derate depth to 750m Aluminum endcap full depth rating 950m Swap aluminum tube for transparent acrylic, derates from 125m to 300m depending on length of tube For completely submerged applications, it's not necessary to use any acrylic parts unless transparency is necessary.","title":"Pressure housing"}]}