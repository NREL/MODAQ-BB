{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MODAQ BlackBox Documentation Until this message is removed, this guide is in draft and actively being edited. During this time, some sections may be blank or not fully developed. General Overview The National Renewable Energy Laboratory (NREL), under funding from the Department of Energy's Water Power Technologies Office , has developed a compact, rapid deployment data acquisition system that can withstand water depths up to 400m. Codenamed \"BlackBox\" (or simply BB), since its initial purpose was to track marine assets and record vital data streams that could later be recovered in the event of a mishap - much like a traditional black box used in aviation and shipping, the name has stuck. MODAQ BlackBox is a battery-operable microcontroller platform with internal inertial sensing, GPS, satellite communications, and additional I/O (input/output) support in a depth-rated pressure enclosure. Since BB is self-contained and relatively compact, it can be quickly deployed with minimal effort. The enclosure can be clamped to a tube (such as part of a railing) or mast in a location with unobstructed view of the sky using the available clamp accessory or a common hose clamp. While BB is designed to operate unattended, users can configure what data are uploaded and the frequency of satellite transmissions. Once data are uploaded, they can be relayed to an email distribution list, MODAQ:Web operational dashboard, or custom destination. BB has found utility in NREL Waterpower projects beyond its original vision and has been configured and successfully deployed in more traditional data-gathering applications where a simple, battery-operated solution was indicated. As part of the MODAQ family, BB fills a space in the spectrum of missions can be supported that were previously impractical using the traditional MODAQ hardware architecture due to factors such as weight, size, and cost.","title":"Home"},{"location":"#modaq-blackbox-documentation","text":"Until this message is removed, this guide is in draft and actively being edited. During this time, some sections may be blank or not fully developed.","title":"MODAQ BlackBox Documentation "},{"location":"#general-overview","text":"The National Renewable Energy Laboratory (NREL), under funding from the Department of Energy's Water Power Technologies Office , has developed a compact, rapid deployment data acquisition system that can withstand water depths up to 400m. Codenamed \"BlackBox\" (or simply BB), since its initial purpose was to track marine assets and record vital data streams that could later be recovered in the event of a mishap - much like a traditional black box used in aviation and shipping, the name has stuck. MODAQ BlackBox is a battery-operable microcontroller platform with internal inertial sensing, GPS, satellite communications, and additional I/O (input/output) support in a depth-rated pressure enclosure. Since BB is self-contained and relatively compact, it can be quickly deployed with minimal effort. The enclosure can be clamped to a tube (such as part of a railing) or mast in a location with unobstructed view of the sky using the available clamp accessory or a common hose clamp. While BB is designed to operate unattended, users can configure what data are uploaded and the frequency of satellite transmissions. Once data are uploaded, they can be relayed to an email distribution list, MODAQ:Web operational dashboard, or custom destination. BB has found utility in NREL Waterpower projects beyond its original vision and has been configured and successfully deployed in more traditional data-gathering applications where a simple, battery-operated solution was indicated. As part of the MODAQ family, BB fills a space in the spectrum of missions can be supported that were previously impractical using the traditional MODAQ hardware architecture due to factors such as weight, size, and cost.","title":"General Overview"},{"location":"FAQ/","text":"FAQ Why build an asset tracker when there are commercially-available devices specifically for this purpose? When the notion of having a tracker was first presented, our first thought was that we would source something 'off the shelf'. We conducted a search and considered a variety of options targeted to both the private and commercial marine market such as purposeful asset trackers, voyage data recorders , and even repurposing lagrangian-drifter beacons. Aside from simple location tracking, the requirements expanded to include acquisition of external data streams, auxiliary data storage (backup/mirror of primary DAQ), and flexible communications options. There were also a number of other requirements such as positive buoyancy, can operate on batteries for a specific period of time, survive at depths of at least a few 100m, strobe light, and acoustic pinger. These requirements were prioritized into 'must-haves' and 'added-as-needed' (meaning we needed to have a solution if a specific project required it). The commercial options reviewed all had strengths and weaknesses to differing degrees on most of the requirements- which included things like: Proprietary or closed systems Ecosystem lock-in or subscription charges Limited external interfacing (usually limited to common marine or aviation electronics) Limited programming or configuration options Too bulky or difficult form-factor Lack (sufficient) onboard storage Limited documentation or unknown specifications of key features Some were rugged and submersible, others not so much It became clear that adapting the most promising candidates would be time consuming and the end result would likely be something that still falls short of requirements- a bit of a kludge. This would be difficult to assure to our sponsors that we're presenting the best solution for their ask and that it will work to expectations. This brought us to the conclusion to design our own system.","title":"FAQ"},{"location":"FAQ/#faq","text":"","title":"FAQ"},{"location":"FAQ/#why-build-an-asset-tracker-when-there-are-commercially-available-devices-specifically-for-this-purpose","text":"When the notion of having a tracker was first presented, our first thought was that we would source something 'off the shelf'. We conducted a search and considered a variety of options targeted to both the private and commercial marine market such as purposeful asset trackers, voyage data recorders , and even repurposing lagrangian-drifter beacons. Aside from simple location tracking, the requirements expanded to include acquisition of external data streams, auxiliary data storage (backup/mirror of primary DAQ), and flexible communications options. There were also a number of other requirements such as positive buoyancy, can operate on batteries for a specific period of time, survive at depths of at least a few 100m, strobe light, and acoustic pinger. These requirements were prioritized into 'must-haves' and 'added-as-needed' (meaning we needed to have a solution if a specific project required it). The commercial options reviewed all had strengths and weaknesses to differing degrees on most of the requirements- which included things like: Proprietary or closed systems Ecosystem lock-in or subscription charges Limited external interfacing (usually limited to common marine or aviation electronics) Limited programming or configuration options Too bulky or difficult form-factor Lack (sufficient) onboard storage Limited documentation or unknown specifications of key features Some were rugged and submersible, others not so much It became clear that adapting the most promising candidates would be time consuming and the end result would likely be something that still falls short of requirements- a bit of a kludge. This would be difficult to assure to our sponsors that we're presenting the best solution for their ask and that it will work to expectations. This brought us to the conclusion to design our own system.","title":"Why build an asset tracker when there are commercially-available devices specifically for this purpose?"},{"location":"about/","text":"","title":"About"},{"location":"dev_modules/","text":"ADC Strain Bridge ADC","title":"Optional Modules"},{"location":"dev_modules/#adc","text":"","title":"ADC"},{"location":"dev_modules/#strain-bridge","text":"","title":"Strain Bridge"},{"location":"dev_modules/#adc_1","text":"","title":"ADC"},{"location":"h_architecture/","text":"MODAQ BlackBox Hardware Architecture General Aside from the functional requirements laid out in the General Overview section, we had several design goals for the BlackBox platform, namely: Low cost hardware Widely available components Popular software development language Open-source libraries for peripherals Strong community support for all of the above There were also several practical goals to the design: Flexible power modes to minimize power consumption when needed Reasonably performant and reliable components Flexible I/O options Compact size Controller The development of MODAQ BlackBox began at a time when computer chip shortages were reaching its peak and many popular microcontroller (MCU) and microprocessor development platforms were in tight supply or had excessive markups. We looked at a number of MCU options that met our goals that managed to largely avoid the supply and pricing issues, such as Arduino, Teensy, and STM32, but ultimately selected the ESP32 platform. While we could have used any of the other platforms mentioned (and we did test them), the ESP32 has strong adoption in the Maker Community and there are commercial industrial controllers and PLCs based on the ESP32. What we like about the ESP32 is its very low cost, tiny form factor, fast 240 MHz dual-core processor, large system memory, FreeRTOS support, ample I/O options, and selectable power and sleep modes. In addition, the ESP32 System on a Chip (SoC) is available by itself for inclusion in custom circuit board designs or as a development board with breadboard/protoboard friendly pinouts, USB controller, and a voltage regulator. There are numerous vendors, including Adafruit and Sparkfun , that offer custom development board variants, but most follow a similar a similar design to the \" DevKit C \" layout, which is what we used. Modules At this stage in the BB development, we're using a development board for the MCU and breakout boards for the peripherals. This gives us broad flexibility for the functionality of any particular build. We are considering creating a PCB design in EDA software that would use raw components that would theoretically reduce power consumption, main board size, and build times, while improving reliability and ruggedness. RTC GPS Iridium Modem IMU Storage Power Enclosure","title":"Hardware Overview"},{"location":"h_architecture/#modaq-blackbox-hardware-architecture","text":"","title":"MODAQ BlackBox Hardware Architecture"},{"location":"h_architecture/#general","text":"Aside from the functional requirements laid out in the General Overview section, we had several design goals for the BlackBox platform, namely: Low cost hardware Widely available components Popular software development language Open-source libraries for peripherals Strong community support for all of the above There were also several practical goals to the design: Flexible power modes to minimize power consumption when needed Reasonably performant and reliable components Flexible I/O options Compact size","title":"General"},{"location":"h_architecture/#controller","text":"The development of MODAQ BlackBox began at a time when computer chip shortages were reaching its peak and many popular microcontroller (MCU) and microprocessor development platforms were in tight supply or had excessive markups. We looked at a number of MCU options that met our goals that managed to largely avoid the supply and pricing issues, such as Arduino, Teensy, and STM32, but ultimately selected the ESP32 platform. While we could have used any of the other platforms mentioned (and we did test them), the ESP32 has strong adoption in the Maker Community and there are commercial industrial controllers and PLCs based on the ESP32. What we like about the ESP32 is its very low cost, tiny form factor, fast 240 MHz dual-core processor, large system memory, FreeRTOS support, ample I/O options, and selectable power and sleep modes. In addition, the ESP32 System on a Chip (SoC) is available by itself for inclusion in custom circuit board designs or as a development board with breadboard/protoboard friendly pinouts, USB controller, and a voltage regulator. There are numerous vendors, including Adafruit and Sparkfun , that offer custom development board variants, but most follow a similar a similar design to the \" DevKit C \" layout, which is what we used.","title":"Controller"},{"location":"h_architecture/#modules","text":"At this stage in the BB development, we're using a development board for the MCU and breakout boards for the peripherals. This gives us broad flexibility for the functionality of any particular build. We are considering creating a PCB design in EDA software that would use raw components that would theoretically reduce power consumption, main board size, and build times, while improving reliability and ruggedness.","title":"Modules"},{"location":"h_architecture/#rtc","text":"","title":"RTC"},{"location":"h_architecture/#gps","text":"","title":"GPS"},{"location":"h_architecture/#iridium-modem","text":"","title":"Iridium Modem"},{"location":"h_architecture/#imu","text":"","title":"IMU"},{"location":"h_architecture/#storage","text":"","title":"Storage"},{"location":"h_architecture/#power","text":"","title":"Power"},{"location":"h_architecture/#enclosure","text":"","title":"Enclosure"},{"location":"links/","text":"","title":"Useful Links"},{"location":"ref_design/","text":"","title":"Ref design"},{"location":"s_architecture/","text":"","title":"Software Overview"},{"location":"tech_ref/","text":"Technical Reference Manual System Design Once all the components were selected, it was necessary to figure out how to mount and wire them- while being constrained by the available space in the enclosure. It was an iterative process with several variables to optimize, including the enclosure's diameter and length, battery size and quantity, and electronics placement. Since one of our requirements was that the package floats, volume, weight, and center of gravity were also selection factors. Ultimately, it was determined that a 75mm inner diameter by 240mm length cylindrical pressure housing would be the minimal size for this design. Schematic Mainboard Layout With the 75mm diameter constraint of the pressure housing, we limited the board width to a maximum of 60mm to allow for component clearance with the wall curvature. With a bit of finesse, we were able to arrange all components except the satellite modem on a single side of a 58 x 94mm perfboard . The other side of the board was reserved primarily for wiring. Part placement was dense, but manageable. All components stayed within the footprint of the perfboard. The wiring was pre-mapped using the row and column markings on the board in a spreadsheet and this was used as a checklist during soldering so that no connections were missed. Even with careful planning, the wiring turned into a bit of a rat's nest, with congested zones that became difficult to solder. Our technique improved for the second unit we assembled (not pictured), but we are strongly considering designing a mainboard in KiCad (or other EDA software) if we intend to produce more of these. Power System This implementation of MODAQ BlackBox is powered by 3 Tadiran Lithium Thionyl Chloride D-sized primary batteries wired in parallel to deliver, nominally, 3.6v with 57 Ahr or around 200 Whr of capacity. The mainboard components operate on 3.3v while the satellite modem requires 5v. We used a buck converter to regulate the 3.3v supply and a boost converter for the 5v side. Power Management Power management was a top priority and it informed several decisions including component selection and sleep strategies. Unlike DAQ variants of this design, the BlackBox configuration does not require continuous sampling. Therefore we could introduce sleep cycles to conserve power. MCU The ESP32 MCU can be programmatically throttled to lower clock speeds to reduce power consumption. For instance this line will reduce the clock speed to 80 Mhz: { setCpuFrequencyMhz(80); } This will result in approximately 50% power savings over the full (default) 240 MHz clock speed. This link contains a good discussion and how-to on ESP power saving measures. GPS Module The GPS' maximum power consumption is on par with the MCU operating at full clock speed- and this power varies depending on the current operational mode the GPS. Simply, the GPS will startup in Acquisition mode until it acquires sufficient satellites and then it may toggle between Acquisition mode and Tracking mode as needed. Tracking mode consumes less power than Acquisition mode, however to be conservative, we based our power consumption projections on the device's maximum published drain. Some GPS modules may have power saving modes that can be preset or invoked, however do to the variability of these modes and likely performance reduction, we left the GPS to its default settings and elected to control the power going to the GPS module instead. Using a GPIO pin on the ESP32 MCU, we set the pin to digital HIGH when we want to power the GPS and LOW to turn it off. Since a GPIO pin cannot supply sufficient current to operate the GPS, we use a 2N222 transistor connected to that GPIO pin to switch the supply to the GPS. There are concerns that simply pulling the plug on the GPS is not an ideal way to manage the power consumption of the system. Continuing the discussion above on Acquisition vs Tracking mode, we usually think of GPS operation in terms of Cold Start, Warm Start, and Hot Start. Manufacturers will often publish expected times to first fix based on which of these start modes is currently applicable. The distinction between these modes is a function of completeness and freshness of the device's ephemeris data (record of tracked satellites' orbital position and information necessary to calculate a positional fix), which in itself is a function of how long the device spent in Acquisition mode and how long ago Acquisition mode ran. Cutting power to the GPS obviously drops the power consumption to zero, but also suspends the building of the ephemeris data. Most GPS units have a backup battery which will preserve the ephemeris between power cycles, but if enough time has elapsed - or the ephemeris was incomplete on the last power up interval - the GPS may have to spend more time at full power consumption to achieve its first fix. We've found that after a 30-60 minute sleep cycle, our time to first fix (TTFF), under best conditions, is <60 seconds. However, if there is heavy cloud cover or antenna obstruction, this time could easily exceed several minutes. In the BlackBox code, we have several measures to address long TTFF as well as low satellite count and fix age: Reject fixes that are more than 1000 ms old. If TTFF is greater than a configurable value, we cancel GPS sleep for the next sleep cycle. If satellite count is less than a configurable value during any one of the first 5 wake cycles, we cancel GPS sleep on next sleep cycle. These measures aim to prevent data starvation of the GPS and improve fix reliability. It may be worthwhile to explore alternative strategies rather than simply killing power to the GPS, however this approach has worked for us. Pressure housing The MODAQ BB design presented here uses the BlueRobotics aluminum subsea housing with an inner diameter of 75mm (3\") and 240mm (9.5\") in length. For radio transparency, we selected the acrylic blank endcap for one end of the housing. Acrylic parts affect the maximum depth rating of the system, however it was necessary for the GPS and satellite radios to function. Maximum possible depth rating for BlueRobotics housings is 950m. The following selections will impact the depth rating: Flat acrylic endcap derate depth to 400m Dome acrylic endcap derate depth to 750m Aluminum endcap full depth rating 950m Swap aluminum tube for transparent acrylic, derates from 125m to 300m depending on length of tube For completely submerged applications, it's not necessary to use any acrylic parts unless transparency is necessary.","title":"Technical Reference"},{"location":"tech_ref/#technical-reference-manual","text":"","title":"Technical Reference Manual"},{"location":"tech_ref/#system-design","text":"Once all the components were selected, it was necessary to figure out how to mount and wire them- while being constrained by the available space in the enclosure. It was an iterative process with several variables to optimize, including the enclosure's diameter and length, battery size and quantity, and electronics placement. Since one of our requirements was that the package floats, volume, weight, and center of gravity were also selection factors. Ultimately, it was determined that a 75mm inner diameter by 240mm length cylindrical pressure housing would be the minimal size for this design.","title":"System Design"},{"location":"tech_ref/#schematic","text":"","title":"Schematic"},{"location":"tech_ref/#mainboard-layout","text":"With the 75mm diameter constraint of the pressure housing, we limited the board width to a maximum of 60mm to allow for component clearance with the wall curvature. With a bit of finesse, we were able to arrange all components except the satellite modem on a single side of a 58 x 94mm perfboard . The other side of the board was reserved primarily for wiring. Part placement was dense, but manageable. All components stayed within the footprint of the perfboard. The wiring was pre-mapped using the row and column markings on the board in a spreadsheet and this was used as a checklist during soldering so that no connections were missed. Even with careful planning, the wiring turned into a bit of a rat's nest, with congested zones that became difficult to solder. Our technique improved for the second unit we assembled (not pictured), but we are strongly considering designing a mainboard in KiCad (or other EDA software) if we intend to produce more of these.","title":"Mainboard Layout"},{"location":"tech_ref/#power-system","text":"This implementation of MODAQ BlackBox is powered by 3 Tadiran Lithium Thionyl Chloride D-sized primary batteries wired in parallel to deliver, nominally, 3.6v with 57 Ahr or around 200 Whr of capacity. The mainboard components operate on 3.3v while the satellite modem requires 5v. We used a buck converter to regulate the 3.3v supply and a boost converter for the 5v side.","title":"Power System"},{"location":"tech_ref/#power-management","text":"Power management was a top priority and it informed several decisions including component selection and sleep strategies. Unlike DAQ variants of this design, the BlackBox configuration does not require continuous sampling. Therefore we could introduce sleep cycles to conserve power.","title":"Power Management"},{"location":"tech_ref/#mcu","text":"The ESP32 MCU can be programmatically throttled to lower clock speeds to reduce power consumption. For instance this line will reduce the clock speed to 80 Mhz: { setCpuFrequencyMhz(80); } This will result in approximately 50% power savings over the full (default) 240 MHz clock speed. This link contains a good discussion and how-to on ESP power saving measures.","title":"MCU"},{"location":"tech_ref/#gps-module","text":"The GPS' maximum power consumption is on par with the MCU operating at full clock speed- and this power varies depending on the current operational mode the GPS. Simply, the GPS will startup in Acquisition mode until it acquires sufficient satellites and then it may toggle between Acquisition mode and Tracking mode as needed. Tracking mode consumes less power than Acquisition mode, however to be conservative, we based our power consumption projections on the device's maximum published drain. Some GPS modules may have power saving modes that can be preset or invoked, however do to the variability of these modes and likely performance reduction, we left the GPS to its default settings and elected to control the power going to the GPS module instead. Using a GPIO pin on the ESP32 MCU, we set the pin to digital HIGH when we want to power the GPS and LOW to turn it off. Since a GPIO pin cannot supply sufficient current to operate the GPS, we use a 2N222 transistor connected to that GPIO pin to switch the supply to the GPS. There are concerns that simply pulling the plug on the GPS is not an ideal way to manage the power consumption of the system. Continuing the discussion above on Acquisition vs Tracking mode, we usually think of GPS operation in terms of Cold Start, Warm Start, and Hot Start. Manufacturers will often publish expected times to first fix based on which of these start modes is currently applicable. The distinction between these modes is a function of completeness and freshness of the device's ephemeris data (record of tracked satellites' orbital position and information necessary to calculate a positional fix), which in itself is a function of how long the device spent in Acquisition mode and how long ago Acquisition mode ran. Cutting power to the GPS obviously drops the power consumption to zero, but also suspends the building of the ephemeris data. Most GPS units have a backup battery which will preserve the ephemeris between power cycles, but if enough time has elapsed - or the ephemeris was incomplete on the last power up interval - the GPS may have to spend more time at full power consumption to achieve its first fix. We've found that after a 30-60 minute sleep cycle, our time to first fix (TTFF), under best conditions, is <60 seconds. However, if there is heavy cloud cover or antenna obstruction, this time could easily exceed several minutes. In the BlackBox code, we have several measures to address long TTFF as well as low satellite count and fix age: Reject fixes that are more than 1000 ms old. If TTFF is greater than a configurable value, we cancel GPS sleep for the next sleep cycle. If satellite count is less than a configurable value during any one of the first 5 wake cycles, we cancel GPS sleep on next sleep cycle. These measures aim to prevent data starvation of the GPS and improve fix reliability. It may be worthwhile to explore alternative strategies rather than simply killing power to the GPS, however this approach has worked for us.","title":"GPS Module"},{"location":"tech_ref/#pressure-housing","text":"The MODAQ BB design presented here uses the BlueRobotics aluminum subsea housing with an inner diameter of 75mm (3\") and 240mm (9.5\") in length. For radio transparency, we selected the acrylic blank endcap for one end of the housing. Acrylic parts affect the maximum depth rating of the system, however it was necessary for the GPS and satellite radios to function. Maximum possible depth rating for BlueRobotics housings is 950m. The following selections will impact the depth rating: Flat acrylic endcap derate depth to 400m Dome acrylic endcap derate depth to 750m Aluminum endcap full depth rating 950m Swap aluminum tube for transparent acrylic, derates from 125m to 300m depending on length of tube For completely submerged applications, it's not necessary to use any acrylic parts unless transparency is necessary.","title":"Pressure housing"}]}